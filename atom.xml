<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[norbu09]]></title>
  <link href="http://norbu09.org/atom.xml" rel="self"/>
  <link href="http://norbu09.org/"/>
  <updated>2012-10-03T00:39:07+13:00</updated>
  <id>http://norbu09.org/</id>
  <author>
    <name><![CDATA[norbu09]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSH tunnel script(2)]]></title>
    <link href="http://norbu09.org/blog/2010/11/05/SSH-tunnel-script2/"/>
    <updated>2010-11-05T00:00:00+13:00</updated>
    <id>http://norbu09.org/blog/2010/11/05/SSH-tunnel-script2</id>
    <content type="html"><![CDATA[<h1>SSH tunnel script(2)</h1>

<p>I work quite a bit with daemons on remote hosts that are normally not
directly listening to the public internet. I use SSH tunnels a lot and
had <a href="http://norbu09.org/2009/08/04/simple-ssh-tunnel-script.html">previously used a simplistic script</a> to deal with it.</p>

<p>I got tired of having to reconnect SSH tunnels when I changed
environments and wanted <a href="http://www.harding.motd.ca/autossh/">autossh</a> to handle the connections. I hacked
around a bit with a shell script and then came up with his perl version.
The config file is a standard git like config that is quite handy as it
handles groups of servers syntax wise.</p>

<p>The calls to <code>tunnel</code> take a tunnel definition from the config file and
start the tunnel with the defined user. It is really written for a safe
environment and not nailed down for security in the moment but feel free
to play with it.</p>

<p>The config file can deal with inheritance and checks the standard directories
(/etc, ~/ and .) and looks like this:</p>

<pre><code>[backend "rabbitmq"]
    local  = 5672
    remote = 5672
    host   = RABBIT_HOST
    user   = USER_WITH_SSH_KEYS

[backend "couchdb"]
    local  = 5986
    remote = 5984
    host   = COUCHDB_HOST
    user   = USER_WITH_SSH_KEYS

[frontend "couchdb"]
    local  = 5984
    remote = 5984
    host   = OTHER_COUCHDB_HOST
    user   = USER_WITH_SSH_KEYS
</code></pre>

<p>The tunnel script is then called with:</p>

<pre><code>tunnel backend.rabbitmq
tunnel frontend.couchdb
...
</code></pre>

<p>It does some basic checking if a port is used already.</p>

<p>The script can be found in my <a href="https://github.com/norbu09/bin/blob/master/tunnel"><code>/bin</code> dump on github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InternetNZ's missed opportunity]]></title>
    <link href="http://norbu09.org/blog/2010/07/27/InternetNZ%27s-missed-opportunity/"/>
    <updated>2010-07-27T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/07/27/InternetNZ&#8217;s-missed-opportunity</id>
    <content type="html"><![CDATA[<h1>InternetNZ&#8217;s missed opportunity</h1>

<p>Open and uncapturable is the mission of InternetNZ and the promise to
push for access to the internet for everyone. This is what we as a
incorporated society stand for and what we try to push. We, all the
members of InternetNZ.</p>

<p>Yesterday at 10:00 AM the internet saw the first ever dedicated
indigenous script going online in the form of the Maori macron
implementation in the .nz namespace. The implementation of IDNs is an
imminent step to acceptance of non English (non ASCII based) scripts on
the internet and the broader access to information in native languages.
The IDN implementation in .nz is the first IDN implementation in a
English speaking ccTLD and the first ever that was done specifically to
support indigenous people. The timing was perfect as yesterday also the
Te Reo language week started as a sign to support and in fact revive the
Maori language in NZ.</p>

<p>Making IDNs accepted in a society needs a lot of education and this
would have been the perfect moment to run a media campaign to
explain what IDNs are, why they are important and what we, as a society,
do to enable the native Maori script on the internet.</p>

<p>I feel ashamed that InternetNZ&#8217;s number one topic yesterday was Telecom
and not the Maori language week. No mention of IDNs and no mention on
the website other than a small note on the side bar that links to the
press release from Friday.</p>

<p>This is in my view <em>not</em> pushing for an open and uncapturable internet,
this is a missed opportunity and a lack of understanding to say the
least. I see a big opportunity to push for true openness missed by
playing politics instead of standing for our own values. I feel ashamed
being part of this society.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slides from Web Meetup]]></title>
    <link href="http://norbu09.org/blog/2010/07/15/slides-from-Web-Meetup/"/>
    <updated>2010-07-15T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/07/15/slides-from-Web-Meetup</id>
    <content type="html"><![CDATA[<p>slides from Web Meetup</p>

<p>The slides from my short talk at the <a href="http://www.meetup.com/wellingtonweb/">Wellington Web Meetup</a> about
Wellingtons worst User experience. The challenge was to describe the
worst user experience in Wellington in 2 min min 5 min max.</p>

<p>Here are my slides:</p>

<div style="width:425px" id="__ss_4756950"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/norbu09/url-ux-4756950" title="Url ux">Url ux</a></strong><object id="__sse4756950" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=urlux-100714184037-phpapp01&stripped_title=url-ux-4756950" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse4756950" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=urlux-100714184037-phpapp01&stripped_title=url-ux-4756950" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/norbu09">Lenz Gschwendtner</a>.</div></div>


<p>and here is a direct link to the PDF:
<a href="http://norbu09.org/images/url_ux.pdf">PDF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lean prototyping stack]]></title>
    <link href="http://norbu09.org/blog/2010/05/25/lean-prototyping-stack/"/>
    <updated>2010-05-25T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/05/25/lean-prototyping-stack</id>
    <content type="html"><![CDATA[<h1>lean prototyping stack</h1>

<p>For my new startup I play with a lean prototyping stack that will enable
me to prototype and evaluate ideas really fast and test on the market.
The idea is to bump out a new idea, prove it and if it works scale it
further. In order to not having to rewrite the entire app once it is
clear that the idea is worth pushing I tried to come up with a nice
stack that enables me to prototype fast and scale if I have to.</p>

<p>Running against all trends I use perl (neither hip nor trendy) and the
quite new <a href="http://mojolicious.org">Mojolicious framework</a> to do the frontend part. In
Mojolicious::Lite I can prototype a small application in no time and can
host it really simple, worst case as a CGI. Mojolicious has a very
powerful HTTP client integrated that makes programming against JSON
based HTTP APIs really straight forward.</p>

<pre><code>$client-&gt;get($url)-&gt;success-&gt;json-&gt;{rows}-&gt;[0]-&gt;{doc}
</code></pre>

<p>This is a request to the second part of my stack: <a href="http://couchdb.org">CouchDB</a>. CouchDB is a
much loved citizen in my tool chain and there are no big surprises that
I picked it as my storage layer. The simplicity and elegance of CouchDB
in this environment makes it even more compelling.</p>

<p>When writing a small web app I normally hit the moment where I either
want to do something asynchronous or where tasks are taking too long
to wait for. Sending mails is one of those tasks. You are normally not
interested in the outcome, if things go wrong you either tell the user
via AJAX or not at all but you don&#8217;t want to wait for it. I am used to
have some sort of backend that takes care of all that. Problem with a
small prototyping framework is that you don&#8217;t want to write a full blown
backend. <a href="http://rabbitmq.com">RabbitMQ</a> to the rescue. RabbitMQ has a JSON RPC interface
that mimics AMQP via a HTTP/JSON interface. This fits perfectly into the
rest of my little framework as it is the same set of protocols again and
if I need to scale I can write native AMQP daemons.</p>

<p>Scaling out to may small prototypes is as easy as creating the new
CouchDB databases. Most probably there is a backend daemon for what we
need already written from an earlier project or we write a quick and
dirty script in <em>any</em> language we like and process the asynchronous
messages. Frontwise the interface is simple enough and pure HTTP/JSON
requests all over. Starting the Mojolicious app is in the smallest form
one file that I can use as a CGI right away.</p>

<p>I&#8217;ll push some libraries that I need on the way to <a href="http://github.com/norbu09">github</a> as usual. If
it turns out to work as nice and reusable as it looks in the moment I am
happy to share more if there is interest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slides from mojolicious talk]]></title>
    <link href="http://norbu09.org/blog/2010/05/12/slides-from-mojolicious-talk/"/>
    <updated>2010-05-12T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/05/12/slides-from-mojolicious-talk</id>
    <content type="html"><![CDATA[<h1>slides from mojolicious talk</h1>

<p>The slides from my talk about mojolicious at perlmongers Wellington
yesterday are on slideshare and can be downloaded below in PDF.</p>

<div style="width:425px" id="__ss_4055266"><strong
style="display:block;margin:12px 0 4px"><a
href="http://www.slideshare.net/norbu09/mojolicious-4055266"
title="Mojolicious">Mojolicious</a></strong><object id="__sse4055266"
width="425" height="355"><param name="movie"
value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mojo-100511161746-phpapp01&stripped_title=mojolicious-4055266"
/><param name="allowFullScreen" value="true"/><param
name="allowScriptAccess" value="always"/><embed name="__sse4055266"
src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mojo-100511161746-phpapp01&stripped_title=mojolicious-4055266"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="425" height="355"></embed></object><div
style="padding:5px 0 12px">View more <a
href="http://www.slideshare.net/">presentations</a> from <a
href="http://www.slideshare.net/norbu09">Lenz
Gschwendtner</a>.</div>


<p></div></p>

<p>and the PDF version:</p>

<p><a href="http://norbu09.org/images/mojo.pdf">mojo.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[customer uses proposal as spec]]></title>
    <link href="http://norbu09.org/blog/2010/05/07/customer-uses-proposal-as-spec/"/>
    <updated>2010-05-07T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/05/07/customer-uses-proposal-as-spec</id>
    <content type="html"><![CDATA[<h1>customer uses proposal as spec</h1>

<p>One of the joys of working as a contractor is quoting for projects that
possibly become a real project some when. The joys of a contractor
quoting to a larger company (at least by New Zealand standards) is that
the decision trees are so arbitrary and long that it might take ages to
get one of those projects. In the meantime you hang in limbo - not too sure if you
should take on another project or not as that bigger one could still
come. I got used to that as those bigger projects always take way longer
as initially planned and by the time they are ripe the project you take
on in the meantime is done easily.</p>

<p>This time round it was different. I made a nice document lining out all
sorts of technical things I would suggest to implement and after knowing
that company for a while already I had a pretty clear idea of what they
really needed and were not able to achieve on their own for the past years.</p>

<p>The doc passed the initial meetings and all looked like this time I
would actually get a project without the need for an interim project
only to learn today that my proposal was refused and instead used as a
spec for the internal teams to implement. Never mind that I think they
are utterly incapable of doing so I am quite irritated that they  not
even considered paying anything for the work I put into the proposal
that is more like a programming howto for a key part of their new
infrastructure now.</p>

<p>Would I still live in Germany I would now call my lawyer - instead I
polished <a href="http://springtimesoft.com">my website</a> and decided to not work for that client
anymore, guess it is healthier and less stressful in the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[real geeks die early]]></title>
    <link href="http://norbu09.org/blog/2010/05/05/every-once-in-a-while/"/>
    <updated>2010-05-05T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/05/05/every-once-in-a-while</id>
    <content type="html"><![CDATA[<h1>real geeks die early</h1>

<p>every once in a while i <a href="http://www.skorks.com/2010/02/did-your-boss-thank-you-for-coding-yourself-to-death/">stumble upon an article</a> from someone pointing
out the dangers we geeks live in in terms of unhealthy work hours
and our very own unhealthy mind set.</p>

<p>I am a developer for profit since the late 90s and a team lead since the
early 2000s. i&#8217;ve seen a fair amount of problems and have done my
fair share of work during nights, weekends and my holidays. it was
expected as part of my work and i was immature enough to not turn it
down.</p>

<p>when i look down the road i came from i&#8217;ve lost a very good friend due
to depressions which were mainly coming from a very unhealthy work
environment and some more not so close friends either to heart attacks
or they suffered serious burn out syndromes that changed their ability
to work entirely. only weeks ago a friend of mine died after a heart
attack and he was only my age. our industry is seriously in trouble, we
set the wrong incentives and we abuse our developers as if we were in
the industrial revolution in the late 1900s.</p>

<p>the problem is that managers will never understand that programming is
not like building a car, you take some parts and can roughly estimate
when it is assembled. geeks invent cars (to stick with the
analogy) and inventing things is not as predictable as simply assembling
stuff. as much as we think we can judge things we are either way above
or way beyond the real time spent. as we normally love what we are doing
we take this risk and try to finish in time even if we are way off with
what we estimated. the problem with inventing is that it can always go
either way, we find that very simple solution simply like that or we
can&#8217;t see it till months after the deadline. a manager has to deliver in
time - which is bollocks, it is never so time critical anyway - but a
developer has to invent that thing and deliver in time. once you are
behind schedule there is the pressure and the coding and normally this
is when quality suffers the most and the most unhealthy time is spent.
the manager keeps pushing you but he will not stay up till 2am sitting
next to you and help you code that beast. he is the one that sits
between you and the customer and has to fight off trouble - but he is
doing that between 9am and 5pm. i am not saying that either one of the
two is doing a more valuable job (i was on either side), i only want to
stress that healthy working times are essential and neglecting social
interaction which comes from long working hours will kill you.</p>

<p>it either kills you very directly with heart attacks or slightly less
deadly but still killing your career with burn outs and nervous
breakdowns or it kills you more indirect with depressions that can lead
to suicide.</p>

<p>i changed my personal rat race some years ago with killing my career and
deciding that life is more about living than piling up status symbols.
funny enough since then so many new opportunities arose that i am way
better off today than i was then. working only healthy hours is
essential for your life and social interaction is key to survive as a
developer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ignite wellington talk]]></title>
    <link href="http://norbu09.org/blog/2010/04/06/ignite-wellington-talk/"/>
    <updated>2010-04-06T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2010/04/06/ignite-wellington-talk</id>
    <content type="html"><![CDATA[<h1>ignite wellington talk</h1>

<p>the slides and the video from my ignite wellington talk are finally
online.  i took part in the first <a href="http://www.ignitewellington.co.nz/">ignite event in wellington</a> which
was part of the <a href="http://radar.oreilly.com/2010/02/global-ignite-week-starts-mond.html">global ignite week</a>. my talk about &#8220;realising ideas&#8221;
was quite a success and i got a lot of positive feedback. in case you
missed it - here is it:</p>

<object width="640" height="385"><param name="movie"
value="http://www.youtube.com/v/MkUZ0yW6rFA&hl=en_GB&fs=1&"></param><param
name="allowFullScreen" value="true"></param><param
name="allowscriptaccess" value="always"></param><embed
src="http://www.youtube.com/v/MkUZ0yW6rFA&hl=en_GB&fs=1&"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="640" height="385"></embed></object>


<p>and the slides on slideshare:</p>

<div style="width:425px" id="__ss_3319656"><strong
style="display:block;margin:12px 0 4px"><a
href="http://www.slideshare.net/norbu09/realising-ideas"
title="realising ideas">realising ideas</a></strong><object width="425"
height="355"><param name="movie"
value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=ignite1-3-lenzgschwendtner-100302145154-phpapp02&stripped_title=realising-ideas"
/><param name="allowFullScreen" value="true"/><param
name="allowScriptAccess" value="always"/><embed
src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=ignite1-3-lenzgschwendtner-100302145154-phpapp02&stripped_title=realising-ideas"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="425" height="355"></embed></object><div
style="padding:5px 0 12px">View more <a
href="http://www.slideshare.net/">presentations</a> from <a
href="http://www.slideshare.net/norbu09">Lenz
Gschwendtner</a>.</div>


<p></div></p>

<p>have fun hacking your brain and realising your ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[testing buzz ...]]></title>
    <link href="http://norbu09.org/blog/2010/02/10/testing-buzz-.../"/>
    <updated>2010-02-10T00:00:00+13:00</updated>
    <id>http://norbu09.org/blog/2010/02/10/testing-buzz-&#8230;</id>
    <content type="html"><![CDATA[<h1>testing buzz &#8230;</h1>

<p>as buzz is only available via my iPhone so far i tried to figure out
from the API docs and the mailinglist how to make it all work. i hope i
have all the right headers in place and google actually knows that this
blog belongs to my shiny <a href="http://www.google.com/profiles/norbu09">google profile</a> and all.</p>

<p>if all goes well this post will trigger a new entry in my buzz &#8230;.
whatever. we will see in &#8230; hours/days/weeks &#8230; who cares anyway :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test driven monitoring]]></title>
    <link href="http://norbu09.org/blog/2010/02/09/test-driven-monitoring/"/>
    <updated>2010-02-09T00:00:00+13:00</updated>
    <id>http://norbu09.org/blog/2010/02/09/test-driven-monitoring</id>
    <content type="html"><![CDATA[<h1>test driven monitoring</h1>

<p>the slides from my talk at perlmongers Wellington are up on slideshare.
the talk was about how much monitoring systems suck and how to make it
better. test driven monitoring is just around the corner, i only have to
bump out some more base libraries but basic monitoring and notification
works already. the code for the project is on <a href="http://github.com/norbu09/TheEye">github</a> - check it out
and contribute.</p>

<div style="width:425px;text-align:left" id="__ss_3099520"><a
style="font:14px Helvetica,Arial,Sans-serif;display:block;margin:12px 0
3px 0;text-decoration:underline;"
href="http://www.slideshare.net/norbu09/the-eye" title="The Eye">The
Eye</a><object style="margin:0px" width="425" height="355"><param
name="movie"
value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=theeye-100207155345-phpapp01&stripped_title=the-eye"
/><param name="allowFullScreen" value="true"/><param
name="allowScriptAccess" value="always"/><embed
src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=theeye-100207155345-phpapp01&stripped_title=the-eye"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="425" height="355"></embed></object><div
style="font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;">View
more <a style="text-decoration:underline;"
href="http://www.slideshare.net/">presentations</a> from <a
style="text-decoration:underline;"
href="http://www.slideshare.net/norbu09">Lenz
Gschwendtner</a>.</div>


<p></div></p>

<p>And a direct <a href="http://norbu09.org/images/TheEye.pdf">link to the PDF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slides from LCA talk]]></title>
    <link href="http://norbu09.org/blog/2010/01/19/slides-from-LCA-talk/"/>
    <updated>2010-01-19T00:00:00+13:00</updated>
    <id>http://norbu09.org/blog/2010/01/19/slides-from-LCA-talk</id>
    <content type="html"><![CDATA[<h1>MPI, Erlang and the web</h1>

<p>The slides from my talk at LCA2010 in Wellington about parallel
programming and why it matters for internet infrastructures are now up
on slideshare</p>

<div style="width:425px;text-align:left" id="__ss_2944765"><a style="font:14px Helvetica,Arial,Sans-serif;display:block;margin:12px 0 3px 0;text-decoration:underline;" href="http://www.slideshare.net/norbu09/mpi-erlang-and-the-web" title="MPI, Erlang and the web">MPI, Erlang and the web</a><object style="margin:0px" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mpi-erlang-and-the-web-100118182245-phpapp02&stripped_title=mpi-erlang-and-the-web" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mpi-erlang-and-the-web-100118182245-phpapp02&stripped_title=mpi-erlang-and-the-web" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;">View more <a style="text-decoration:underline;" href="http://www.slideshare.net/">documents</a> from <a style="text-decoration:underline;" href="http://www.slideshare.net/norbu09">Lenz Gschwendtner</a>.</div></div>


<p>And a direct <a href="http://norbu09.org/images/mpi-erlang-and-the-web.pdf">link to the PDF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 new destination markets in some months]]></title>
    <link href="http://norbu09.org/blog/2010/01/15/3-new-destination-markets-in-some-weeks/"/>
    <updated>2010-01-15T00:00:00+13:00</updated>
    <id>http://norbu09.org/blog/2010/01/15/3-new-destination-markets-in-some-weeks</id>
    <content type="html"><![CDATA[<h1>Three new destination markets in some months</h1>

<p>It&#8217;s been a bit of a busy time lately as we launched three new platforms
in the last time and that brought with it a lot of challenges.
Fortunately it also pushed me to complete our migration to our new
backend which is now entirely message driven and based only on the
finest stuff one finds in the moment.</p>

<p>The backend engine is <a href="http://rabbitmq.com">RabbitMQ</a> based and persists messages to
<a href="http://couchdb.apache.org">CouchDB</a> if necessary. We have a simple home grown workflow engine
that enables us to easily customise and change flows like what happens
if a domain gets registered or exactly when we charge a user. I spoke
about an early version of this workflow engine last year at the erlounge
Wellington
(http://norbu09.org/2009/10/15/one-system-to-rule-them-all.html). This
backend engine is a scalable hub for tasks and the main challenge was to
make our frontend stupid simple and more or less only a wrapper for
tasks happening in the backend. We have now nearly all the logic moved
and the frontend is quite slim, holding only the e-commerce and user
profile functionality whereas all the domain specific functionality
moved out.</p>

<p>The next step was to make our frontend not only simple but also
brandable and multi currency/language. This is the moment where you
notice that strings are everywhere and solid internal APIs pay off big
time. This challenge was a big one but we managed to master it and have
now an <a href="http://iWantMyName.com">English</a>, <a href="http://meinName.com">German</a> and <a href="http://benikvrij.nl">Dutch</a> version online selling
in USD, EUR and <a href="http://iWantMyName.co.nz">NZD</a>. The frontend is a generic one that has many
configuration knobs that can tweak the functionality but it is still
only one code base for all projects. The template sets are separate so
each language has its own template set. The two English speaking
platforms share a template set but have different currencies - the
content however is not 100% the same on the two. All this needs lots of
config variables to check against and Template::Toolkit was a big help
here.</p>

<p>As you can see there went a lot of effort into designing a flexible
system that can act in different environments and still be only
one system. Most of the content is now served out of CouchDB and we
further reduced the amount of data stored in PostgreSQL as well as hard
coded texts in templates. We rewrote our shopping card from scratch and
the checkout process is really simple now as most of the heavy lifting
is now in the backend. Stuff we are working on in the moment is Session
handling and user management in CouchDB with a goal to strip out
PostgreSQL entirely (the according Catalyst::Plugins are on the way).
Don&#8217;t get me wrong, we love PostgreSQL but there is no need for it
anymore once we have the remaining things ported over to CouchDB. It
simplifies our stack and reduces our admin overhead.</p>

<p>Speaking of admin overhead - we also run all setups (including local
development VMs) off a puppet setup and code/template/CouchDB rollout is
done via capistrano which turns out to work quite well with catalyst and
perl. We roll out a new frontend webserver in about half an hour
from bare debian to running frontend with the most time being spent
waiting for puppet and no manual step other then installing puppet.</p>

<p>You see we have been busy, if you find bugs, report them. We know that
the performance in the DNS editor is still crap but we try to sort that
and there are some rough edges here and there but most of the platforms
should run smoothly. It was a steep learning curve once again but we
managed to create a scalable system that is extremely flexible and fast.</p>

<p>&#8230; hope you like it &#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[one system to rule them all]]></title>
    <link href="http://norbu09.org/blog/2009/10/15/one-system-to-rule-them-all/"/>
    <updated>2009-10-15T00:00:00+13:00</updated>
    <id>http://norbu09.org/blog/2009/10/15/one-system-to-rule-them-all</id>
    <content type="html"><![CDATA[<h1>One system to rule them all</h1>

<p>Here are the slides from my talk at erounge Wellington yesterday. It is
about a workflow system I wrote in perl and erlang based on RabbitMQ and
CouchDB. It is language independent and communicates with JSON messages.</p>

<div style="width:425px;text-align:left" id="__ss_2223826"><a
style="font:14px Helvetica,Arial,Sans-serif;display:block;margin:12px 0
3px 0;text-decoration:underline;"
href="http://www.slideshare.net/norbu09/rabbitmq-couchdb-awesome"
title="RabbitMQ + CouchDB = Awesome">RabbitMQ + CouchDB =
Awesome</a><object style="margin:0px" width="425" height="355"><param
name="movie"
value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=one-system-to-rule-them-all-091014153738-phpapp02&stripped_title=rabbitmq-couchdb-awesome"
/><param name="allowFullScreen" value="true"/><param
name="allowScriptAccess" value="always"/><embed
src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=one-system-to-rule-them-all-091014153738-phpapp02&stripped_title=rabbitmq-couchdb-awesome"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="425" height="355"></embed></object><div
style="font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;">View
more <a style="text-decoration:underline;"
href="http://www.slideshare.net/">documents</a> from <a
style="text-decoration:underline;"
href="http://www.slideshare.net/norbu09">Lenz
Gschwendtner</a>.</div>


<p></div></p>

<p>And a direct <a href="http://norbu09.org/images/one-system-to-rule-them-all.pdf">link to the PDF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ for perl mongers]]></title>
    <link href="http://norbu09.org/blog/2009/09/09/RabbitMQ-talk-at-perlmongers/"/>
    <updated>2009-09-09T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/09/09/RabbitMQ-talk-at-perlmongers</id>
    <content type="html"><![CDATA[<p>RabbitMQ for perl mongers</p>

<p>This is a short summary of the talk I gave yesterday at perl mongers
Wellington about RabbitMQ and messaging in general and how to use it
from perl.</p>

<p>The slides are on slideshare</p>

<div style="width:425px;text-align:left" id="__ss_1969944"><a
style="font:14px Helvetica,Arial,Sans-serif;display:block;margin:12px 0
3px 0;text-decoration:underline;"
href="http://www.slideshare.net/norbu09/rabbitmq-for-perlmongers"
title="RabbitMQ for Perl mongers">RabbitMQ for Perl mongers</a><object
style="margin:0px" width="425" height="355"><param name="movie"
value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=rabbitmq-for-perlmongers-090908173752-phpapp02&stripped_title=rabbitmq-for-perlmongers"
/><param name="allowFullScreen" value="true"/><param
name="allowScriptAccess" value="always"/><embed
src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=rabbitmq-for-perlmongers-090908173752-phpapp02&stripped_title=rabbitmq-for-perlmongers"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="425" height="355"></embed></object><div
style="font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;">View
more <a style="text-decoration:underline;"
href="http://www.slideshare.net/">documents</a> from <a
style="text-decoration:underline;"
href="http://www.slideshare.net/norbu09">Lenz
Gschwendtner</a>.</div>


<p></div></p>

<p>The git repositories are on github: <a href="http://github.com/norbu09">http://github.com/norbu09</a>
relevant repositories are:
- net-amqp
- Net_RabbitMQ_HTTP
- RabbitIntro</p>

<p>There was a fair amount of interest in the topic so if some one wants to
know more feel free to contact me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django like URL mapping in Catalyst - kind of]]></title>
    <link href="http://norbu09.org/blog/2009/08/26/Django-like-URL-mapping-in-Catalyst---kind-of/"/>
    <updated>2009-08-26T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/08/26/Django-like-URL-mapping-in-Catalyst&#8212;kind-of</id>
    <content type="html"><![CDATA[<p>Django like URL mapping in Catalyst - kind of</p>

<p>The problem I tried to solve is trivial, at least that was what I
thought. I tried to remap URLs in one of our platforms to make it easy
for others to adapt the way we call things. I18N related mostly. I have
most of the things that might change in central config file already but
figuring out how I actually get the URL map in there took a while. I
finally found <a href="http://www.catalystframework.org/calendar/2008/11">
this post from Matt Trout</a> where he outlines several possibilities to
tackle it. Facing lack of time and knowing that the mapping is done by
others ;-) I went with the verbose version. It fits quite nicely in our
way of deploying Catalyst apps with local config files that change
behaviour of the platform.</p>

<p>In your central config file (MyApp.conf) put a snippet like this:</p>

<div>
  <pre><code class='xml'>&lt;Controller Editor&gt;
  &lt;action index&gt;
    Path        /vim
  &lt;/action&gt;
  &lt;action content&gt;
    Path        /vim/content
  &lt;/action&gt;
  &lt;action tld&gt;
    Path        /vim/tld
  &lt;/action&gt;
&lt;/Controller&gt;</code></pre>
</div>


<p>This maps the controller <code>Editor</code> to the path <code>/vim</code> and the two actions
( content and tlds ) to the according endpoints under it. This stupid
snippet cost me a couple of hours to figure out but now live is good and
I can move on :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[simple ssh tunnel script]]></title>
    <link href="http://norbu09.org/blog/2009/08/04/simple-ssh-tunnel-script/"/>
    <updated>2009-08-04T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/08/04/simple-ssh-tunnel-script</id>
    <content type="html"><![CDATA[<h1>Simple ssh tunnel script</h1>

<p>When replicating CouchDB you need either VPN oder authentication or
simply a SSH tunnel. No big deal normally a simple <code>ssh -L...</code> does the
trick but I ended up with those SSH sessions that blocked ports and hung
around and it was not the way to go in terms of automating rollouts
where you need that port once and then never again.</p>

<p>A bit of googling brought up a script of the <a href="http://wiki.bacula.org/doku.php?id=sshtunnel">
bacula guys</a> that had the same problem and I adopted their script a
bit to fit my needs. Here is what I came up with:</p>

<div>
  <pre><code class='sh'>#!/bin/sh
# Establishes a self-killing SSH tunnel to the
# given SSH server, and forwards the correct
# ports for couchdb usage.

USER=[YOUR USER HERE]
HOME=$(grep &quot;^$USER:&quot; /etc/passwd | cut -d : -f 6)
CLIENT=$1
SSH=/usr/bin/ssh
DESTPORT=5985

echo &quot;Starting SSH-tunnel to $CLIENT...&quot;
# -f means: go into background
# -C means: use compression
# -2 means: only use SSH2
# -L 5985:localhost:5984 means: when forward 5985 to destination:5984
# sleep 60 is a simple command that will execute on the server and does
# nothing for 60 seconds,
# then it exits. This keeps ssh running for 60 seconds. Once we connect
# to the FD, that
# connection will keep ssh running even beyond the 60 seconds.
# Using this approach, we do not need to tear down the tunnel later, it
# disconnects itself
# automagically.
${SSH} -fC2 -L ${DESTPORT}:localhost:5984 ${CLIENT} sleep 60 &gt;/dev/null
2&gt;/dev/null
# give ssh a little time to establish the connection.
sleep 10</code></pre>
</div>


<p>Put it in a file called <code>sshtunnel</code> and make it executable. Usage is as
simple as <code>./sshtunnel user@host</code> or without the user if it is the same
you are using in the <code>$USER</code> variable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git via HTTP (startup automation 3)]]></title>
    <link href="http://norbu09.org/blog/2009/08/02/git-via-HTTP-%28startup-automation-3%29/"/>
    <updated>2009-08-02T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/08/02/git-via-HTTP-(startup-automation-3)</id>
    <content type="html"><![CDATA[<h1>Startup automation - Part 3</h1>

<h2>git via HTTP with nginx</h2>

<p>Just in case you don&#8217;t know (very unlikely) or never played with nginx
before. This is <em>the</em> web server and frontend HTTP loadbalancer all your
HTTP based setups should have anyway. There is documentation in English
on the nginx wiki (<a href="http://wiki.nginx.org">http://wiki.nginx.org</a>)
and if you get stuck there is a lot of stuff just on google. The rails
community love nginx and they tend to document well - a thanks at this
point to those guys.</p>

<p>The setup is really straight forward but has some minor cave eats that
can cause you grief and debugging hours I want to save you.</p>

<p>First of all you need nginx installed on your system - obviously. I
assume that your webroot is under <code>/var/www</code>. We need a directory called
<code>git</code> under it and need to link the repositories in that you want to
share.</p>

<div>
  <pre><code class='sh'>$ mkdir /var/www/git
$ cd /var/www/git
$ ln -s /srv/gitosis/repositories/[repository].git [repository]</code></pre>
</div>


<p>This includes some assumptions. I take that you have more repositories
in your gitosis setup than public repositories you want to share or make
available via http. If this is not the case you can simply point nginx
at your gitosis repository path and add a simple rewrite rule that cuts
off the trailing <code>.git</code> of the repository path.</p>

<p>In nginx we need some configuration that acually serves those
repositories now. That is initially really straight forward:</p>

<div>
  <pre><code class='sh'>server {
    listen   80;
    server_name  git.[your.domain.tld];
    access_log  /var/log/nginx/git.access.log;
    location / {
        root   /var/www/git/;
    }
}</code></pre>
</div>


<p>This is the first very basic configuration for nginx. All we have to do
now is enabling a simple hook in our git repository we want to serve
and we are done.</p>

<p>To do that we need to go to our gitosis repository (you can simply <code>cd</code> to
the linked directory now) and edit the <code>hooks/post-update</code> hook. Add the
following line (or uncomment it) and make sure the file has the
executable bit set (<code>chmod +x hooks/post-update</code>).</p>

<div>
  <pre><code class='sh'>exec git-update-server-info</code></pre>
</div>


<p>This post update hook needs to be run once now. You can either push
something to the repository to trigger the hook or <code>su</code> to the git user
and simply run the hook. The <code>su</code> is important to not screw up the
permissions.</p>

<p>Speaking of permissions - we need to make the repository readable by the
nginx user. The easy way is to add <code>www-data</code> to the git group that owns
the git repository. The git group should only have read access to the
git repositories anyway so it does not open up a too big hole in your
security.</p>

<p>Once all that is done you can test your setup with the following
command:</p>

<div>
  <pre><code class='sh'>git ls-remote
http://git.[your.domain.tld]/[repository] master</code></pre>
</div>


<p>This should come back with something like this:</p>

<p><code>171bb2f12ceb908fd4802857a2f577a1739f8d1f        refs/heads/master</code></p>

<h2>Securing the setup with &#8220;basic auth&#8221; and HTTPS</h2>

<p>Now comes the fun part. After we have this setup up and running we can
start to use it for rollout systems like capistrano and have read only
repositories that we serve via HTTPS and basic auth without the need of
deploying SSH keys all over for access to gitosis.</p>

<p>All we have to do now is change our nginx configuration slightly. We
need to enable HTTPS and we can even have different auth files for
different projects. This might be interesting if you run several
projects on your gitosis host with different committers.</p>

<div>
  <pre><code class='sh'>server {
    listen   443;
    server_name  git.[your.domain.tld];
    access_log  /var/log/nginx/git.access.log;

    ssl  on;
    ssl_certificate  certs/git.pem;
    ssl_certificate_key  certs/git.key;

    ssl_session_timeout  5m;

    ssl_protocols  SSLv2 SSLv3 TLSv1;
    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ssl_prefer_server_ciphers   on;

    location / {
        root   /var/www/git/;
        auth_basic            &quot;Restricted&quot;;
        auth_basic_user_file  conf.d/htpasswd.general;
    }

    location /[repository 1] {
        root   /var/www/git/;
        autoindex  on;
        auth_basic            &quot;Restricted&quot;;
        auth_basic_user_file  conf.d/htpasswd.[group 1];
    }
    location /[repository 2] {
        root   /var/www/git/;
        autoindex  on;
        auth_basic            &quot;Restricted&quot;;
        auth_basic_user_file  conf.d/htpasswd.[group 2];
    }
}</code></pre>
</div>


<p>Reload your nginx and you have your repositories served up under HTTPS
and only need to create the htaccess files now. This is simply done with
the <code>htaccess</code> program that is part of apache (or the apache utils with
come as a separate package).
Also note that your <code>root</code> directory is always the base git webroot.</p>

<h2>some oddities</h2>

<p>While testing I used self signed certificates and as the host is only
used in non public ways I will stay with them. This caused some googling
however as git came up with the following error:</p>

<p><code>fatal: https://[user:pass@git.host]/[repository]/info/refs download error - SSL certificate problem, verify that the CA cert is OK.</code></p>

<p>This is due to the self signed cert and has to be overridden with a
environment variable. A simple</p>

<div>
  <pre><code class='sh'>$ export GIT_SSL_NO_VERIFY=true</code></pre>
</div>


<p>did the trick. If you have a rollout user you want this parameter to be
in his <code>.profile</code> or your shell specific equivalent (eg <code>.bashrc</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ talk at erlounge]]></title>
    <link href="http://norbu09.org/blog/2009/07/17/RabbitMQ-talk-at-erlounge/"/>
    <updated>2009-07-17T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/07/17/RabbitMQ-talk-at-erlounge</id>
    <content type="html"><![CDATA[<p>RabbitMQ talk at erlounge</p>

<p>This is a short summary of the talk I gave yesterday at erlounge
Wellington about RabbitMQ and messaging in general.</p>

<p>The slides are now on slideshare</p>

<div style="width:425px;text-align:left" id="__ss_1731778"><a
style="font:14px Helvetica,Arial,Sans-serif;display:block;margin:12px 0
3px 0;text-decoration:underline;"
href="http://www.slideshare.net/norbu09/rabbitmq-1731778"
title="RabbitMQ">RabbitMQ</a><object style="margin:0px" width="425"
height="355"><param name="movie"
value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=rabbitmq-090716164944-phpapp01&stripped_title=rabbitmq-1731778"
/><param name="allowFullScreen" value="true"/><param
name="allowScriptAccess" value="always"/><embed
src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=rabbitmq-090716164944-phpapp01&stripped_title=rabbitmq-1731778"
type="application/x-shockwave-flash" allowscriptaccess="always"
allowfullscreen="true" width="425" height="355"></embed></object><div
style="font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;">View
more <a style="text-decoration:underline;"
href="http://www.slideshare.net/">documents</a> from <a
style="text-decoration:underline;"
href="http://www.slideshare.net/norbu09">norbu09</a>.</div>


<p></div></p>

<p>The git repositories are on github: <a href="http://github.com/norbu09">http://github.com/norbu09</a>
relevant repositories are:
- RabbitIntro
- Net_RabbitMQ_HTTP
- net-amqp</p>

<p>The question about a frontend to RabbitMQ was answered today with this
project that looks really promising:
<a href="http://willcodeforfoo.com/2009/07/13/announcing-alice/">http://willcodeforfoo.com/2009/07/13/announcing-alice/</a></p>

<p>I hope you all enjoyed the talk and hope I could spark a bit of interest
in the topic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[puppet basics (startup automation 2)]]></title>
    <link href="http://norbu09.org/blog/2009/06/14/puppet-basics-startautomation/"/>
    <updated>2009-06-14T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/06/14/puppet-basics-startautomation</id>
    <content type="html"><![CDATA[<h1>Startup automation - Part 2</h1>

<h2>puppet basics</h2>

<p>In the last part of startup automation I talked you through the basics
of configuring gitosis and the puppet config directory to make
deployment of the config files really easy. Obviously we need some test
clients and a working server now to play. I use parallels for local
development and normally fire up one VM per project. I created an empty
debian VM and just did a <code>apt-get install puppet</code>. This installs all
dependencies and leaves you with a working client.</p>

<h2>create a basic configuration</h2>

<p>we need some basic configuration files before we can start. Use these as
templates, they are more or less standard debian config files so you
might have to tweak paths a bit for your environment:</p>

<p><code>puppet.conf</code></p>

<div>
  <pre><code class='ini'>[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
pluginsync=true

[puppetmasterd]
templatedir=/var/lib/puppet/templates</code></pre>
</div>


<p><code>fileserver.conf</code></p>

<div>
  <pre><code class='ini'># This file consists of arbitrarily named sections/modules
# defining where files are served from and to whom

# Define a section 'files'
# Adapt the allow/deny settings to your needs. Order
# for allow/deny does not matter, allow always takes precedence
# over deny
[files]
path /etc/puppet/files
#  allow *.example.com
#  deny *.evil.example.com
#  allow 192.168.0.0/24

[plugins]
#  allow *.example.com
#  deny *.evil.example.com
#  allow 192.168.0.0/24</code></pre>
</div>


<p>and a basic <code>manifests/site.pp</code></p>

<div>
  <pre><code class='ruby'># site.pp

filebucket { main: server =&gt; 'YOUR_PUPPET_SERVER_HERE' }

# global defaults
File { backup =&gt; main }
Exec { path =&gt; &quot;/usr/bin:/usr/sbin/:/bin:/sbin&quot; }

Package {
    provider =&gt; $operatingsystem ? {
        debian =&gt; aptitude,
        redhat =&gt; up2date
    }
}</code></pre>
</div>


<p>Make sure you edit the <code>sites.pp</code> to actually point to your puppet
server. Add those files, commit and push. Then restart your
puppetmasterd on the server.</p>

<p>We need two shells now, one on the server and one on your client. Fire
up your shell on the server and ask the puppetmaster for pending
certificate requests with the <code>puppetca</code> command:</p>

<div>
  <pre><code class='sh'>$ puppetca --list</code></pre>
</div>


<p>This should return with <code>no pending requests</code> message or so.</p>

<p>Fire up the second shell on your client and request a certificate from
your server. We try it interactive first till things go smooth:</p>

<div>
  <pre><code class='sh'>$ puppetd --server YOUR_PUPPET_SERVER --waitforcert 60 --test</code></pre>
</div>


<p>This should come back with an error that the cert could not be issued
yet. This is expected as we have not authorized the client yet. To do so
we hop over to our server console again and issue the puppetca command
again. We should have a pending request now from our test client. Go on
and sign it with</p>

<div>
  <pre><code class='sh'>$ puppetca --sign CLIENT_NAME</code></pre>
</div>


<p>If you rerun the client now with the same command it should be happy and
report success.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[puppet and gitosis (startup automation 1)]]></title>
    <link href="http://norbu09.org/blog/2009/06/10/gitosis-and-puppet-setup-startupautomation/"/>
    <updated>2009-06-10T00:00:00+12:00</updated>
    <id>http://norbu09.org/blog/2009/06/10/gitosis-and-puppet-setup-startupautomation</id>
    <content type="html"><![CDATA[<h1>Startup automation - Part 1</h1>

<p>Startup automation became a big buzz currently but I think it has always
been key to those who were successful. The speed to market is important
and this is not only true for small companies.</p>

<p>Enough marketing blurb. Truth is we tech guys are lazy and that is a
good habit. Laziness keeps us creative in terms of minimising tasks we
have to do and that means in automating stuff. When you (as the tech
guy) grow a company there are many things only you know and can do. This
is normal. One day your marketing guy wants to release new content not
only once but 5 times and you start to think about a real rollout
process. Tis is not exactly new technology but it keeps you busy for a
while and there is a surprising lack of good tutorials out there.</p>

<p>I played with puppet and gitosis the other day to automate parts of our
environment and came up with the following setup. It runs on a slicehost
slice on debian - being a freebsd and mac guy I can confirm the setup is
not too different on those platforms either :-)</p>

<h2>gitosis</h2>

<p>gitosis is a git hosting platform that uses virtual users and is managed
entirely with git hooks. This is nice as you simply check out the master
repository and add users and repositories there. Really simple, really
effective.
It looks like there is exactly one post in the wild that describes
gitosis setup and that is from 2007 (<a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way" title="scie.nti.st">scie.nti.st</a>)</p>

<p>First important thing here is a ssh key. You should have one and used to
use it. If you never heard of ssh keys do your homework first!</p>

<p>The last part of your ssh key is normally username@host. Edit that one
to be only your preferred username - this identifier will be the
reference in your gitosis config for your user.</p>

<p>I started playing with gitosis and came up with the following order:
- install gitosis from your preferred package management system (ports,
  apt, &#8230;)
- copy your ssh public key /tmp on the gitosis host
- initialize the repository
  <div>
  <pre><code class='sh'>$ sudo -H -u gitosis gitosis-init &lt; /tmp/id_dsa.pub</code></pre>
</div></p>

<ul>
<li><p>clone the new master repository
<div>
<pre><code class='sh'>$ git clone gitosis@GITHOST:gitosis-admin.git</code></pre>
</div></p></li>
<li><p>edit gitosis.conf
<div>
<pre><code class='ini'>[group admin]
members = YOURNAME
writable = puppet</code></pre>
</div></p></li>
<li><p>add the gitosis.conf and commit and push</p></li>
<li>you have successfully created your first step in a working gitosis
setup</li>
<li>create a local repository called puppet (git init &#8230;)</li>
<li><p>tell the git repository where your gitosis server is
<div>
<pre><code class='sh'>$ git remote add origin gitosis@GITHOST:puppet.git</code></pre>
</div></p></li>
<li><p>touch a file (you need to have something in the repository to commit)</p></li>
<li>add and commit the file</li>
<li>push the repository to the gitosis server
<div>
<pre><code class='sh'>$ git push origin master:refs/heads/master</code></pre>
</div></li>
</ul>


<p>After this you have two things - a master gitosis repository for your
git server management and a local puppet repository for your future
puppet setup. This puppet setup does not do anything yet so lets wire
that one up to your puppetmaster. For simplicity I assume that the
gitosis server will also be your puppetmaster. Once the underlying
concept is understood you can easily change the puppetmaster to any
other host by only changing the post commit hook in the according git
repository.</p>

<h2>puppet</h2>

<p>Till now we did not bother finding the filesystem location of our new
gitosis setup. Now we need some git hooks in the puppet repository and
we have to find it. Under debain you can find the gitosis repository
structure in <code>/srv/gitosis</code> and our puppet repository under
<code>/srv/gitosis/repositories/puppet.git</code>.</p>

<p>I started out by creating a <code>bin</code> directory for the gitosis user as I
expect to share some code between different hooks. There will be many
&#8220;check out this repo to this working directory&#8221; hooks for various
purposes. The first script is very basic and does nothing fancy - we can
beef it up later on as we go.</p>

<p><code>/srv/gitosis/bin/update.sh</code></p>

<div>
  <pre><code class='sh'>#!/bin/sh
umask 002

PFAD=$1
CURR=`pwd`
cd ${PFAD}

env -i /usr/bin/git-pull origin master
env -i git-update-server-info
cd ${CURR}</code></pre>
</div>


<p>This simple script takes one argument which is the destination path and
doe a git pull there. Very generic and not too secure but it does the
trick for the beginning.</p>

<p>Now we need to make this script executable and add it to the
post-receive git hook in the puppet repository. Go to
<code>/srv/gitosis/repositories/puppet.git/hooks</code> and edit the <code>post-receive</code>
hook. We only need the following line in there for the moment:</p>

<div>
  <pre><code class='sh'>~/bin/update.sh /etc/puppet</code></pre>
</div>


<p>This calls our shiny update script we wrote moments ago. Make sure the
hook script is executable. Now we start setting up puppet. Make sure you
installed puppetmasterd via your favorite package management system. In case you
have a working puppet setup already make sure you back up all your
configuration files. I assume there is nothing here yet and we can axe
the existing stuff and start from scratch.</p>

<p>Remove the existing <code>/etc/puppet</code> directory and clone our repository
here.</p>

<div>
  <pre><code class='sh'>$ cd /etc
$ rm -rf puppet
$ git clone /srv/gitosis/repositories/puppet.git
$ chmod -R g+w puppet</code></pre>
</div>


<p>Now we have to modify two hooks to make sure we fix permissions. This is
a ugly hack and only gets us started for now - this should really be
done nicer later on. Edit in the puppet directory under <code>.git/hooks</code> the
file <code>post-merge</code> and add the following:</p>

<div>
  <pre><code class='sh'>#!/bin/sh

echo &quot;granting rights in `pwd`&quot;
sudo chown -R root:root /etc/puppet</code></pre>
</div>


<p>To make this work you need to make sure that the gitosis user is in your
sodoers file and of course that sudo is installed. Make this file
executable and copy it to the <code>post-checkout</code> hook.</p>

<p>Nearly there, test it now and see if you get errors when you push puppet
configuration to the server. If all goes well you should see the puppet
config hitting your <code>/etc/puppet</code> directory on the server right after
you pushed your local repository.</p>

<p>How to set up a basic puppet infrastructure will be covered in the next
part of this series. Stay tuned &#8230;</p>
]]></content>
  </entry>
  
</feed>
